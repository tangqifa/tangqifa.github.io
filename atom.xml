<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tech&Life]]></title>
  <link href="http://tangqifa.github.io/atom.xml" rel="self"/>
  <link href="http://tangqifa.github.io/"/>
  <updated>2015-06-18T17:48:22+08:00</updated>
  <id>http://tangqifa.github.io/</id>
  <author>
    <name><![CDATA[tangqifa]]></name>
    <email><![CDATA[tangqifa@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android开发中常见安全问题]]></title>
    <link href="http://tangqifa.github.io/blog/2015/06/18/androidkai-fa-zhong-chang-jian-an-quan-wen-ti/"/>
    <updated>2015-06-18T17:43:58+08:00</updated>
    <id>http://tangqifa.github.io/blog/2015/06/18/androidkai-fa-zhong-chang-jian-an-quan-wen-ti</id>
    <content type="html"><![CDATA[<blockquote><p>由于公司是做互联网金融的，所以对APP客户端的安全性要求较高，本文针对中国金融认证中心（简称CFCA）对我们的APP检测过程中存在的问题和解决方案梳理如下：</p></blockquote>

<ul>
<li><p>存在问题：Activity劫持情况，恶意应用可以劫持合法应用 <br/>
整改方案：当程序启动后，判断当前置顶的应用是否为自身应用，若不是，则弹出Toast窗口提示用户注意 <br/>
关键代码：
<pre>
//获取当前顶层应用包名
    public static String getTopPackageName(Context context) {
      ActivityManager am = (ActivityManager)context.getSystemService(context.ACTIVITY_SERVICE);
      List&lt;ActivityManager.RunningTaskInfo> taskInfo = am.getRunningTasks(1);
      ComponentName componentInfo = taskInfo.get(0).topActivity;
      return componentInfo.getPackageName();
  }
</pre></p></li>
<li><p>存在问题：未检查是否root <br/>
整改方案：判断系统状态，发现root、越狱后提示用户风险 <br/>
关键代码：
<pre>
//判断是否root
  public static boolean isRoot() {
      boolean root = false;
      try {
          if ((!new File(&ldquo;/system/bin/su&rdquo;).exists())
                  &amp;&amp; (!new File(&ldquo;/system/xbin/su&rdquo;).exists())) {
              root = false;
          } else {
              root = true;
          }
      } catch (Exception e) {
      }
      return root;
  }
</pre></p></li>
<li><p>存在问题：软件未进行加壳加固 <br/>
整改方案：对软件进行加壳加固，主要考虑第三方，比如爱加密</p></li>
<li><p>存在问题：客户端未能验证自身合法性，服务器也未能验证客户端合法性 <br/>
整改方案：在程序启动以及运行过程中，对程序自身的签名进行校验，而校验方式一般是通过对应用的签名的验证，比如对签名做MD5或者sha1 <br/>
关键代码：
 <pre>
//获取签名的MD5
public static  String getCertMsg(Context context, String packageName) {
      String certMsg = &ldquo;&rdquo;;
      if (TextUtils.isEmpty(packageName)) {
          return certMsg;
      }
      PackageInfo pis;
      try {
          pis = context.getPackageManager().getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
          Signature[] sigs = pis.signatures;    //签名
          CertificateFactory certFactory = CertificateFactory.getInstance(&ldquo;X.509&rdquo;);
          //获取证书
          X509Certificate cert = (X509Certificate) certFactory.generateCertificate(
                  new ByteArrayInputStream(sigs[0].toByteArray()));
          //获取证书发行者   可根据证书发行者来判断该应用是否被二次打包（被破解的应用重新打包后，签名与原包一定不同，据此可以判断出该应用是否被人做过改动）
          certMsg = MD5Utils.getMD5(cert.getSubjectDN().toString());
          LogHelperDebug.d(TAG,&ldquo;SubjectDN MD5: &rdquo; + certMsg);
      } catch (CertificateException e) {
          LogHelperDebug.e(&ldquo;CertificateException&rdquo;, e.getMessage());
      } catch (Exception e) {
          LogHelperDebug.e(&ldquo;Exception: &rdquo;, e.getMessage());
      }
      return certMsg;
  }
</pre></p></li>
<li><p>存在问题：未对口令复杂度进行验证 <br/>
整改方案：建议要求口令复杂度，至少两种字符,主要利用正则表达式验证 <br/>
关键代码：
<pre>
    public static boolean checkPassword(String value) {
      return value.matches(&ldquo;^(?=.<em>[0-9])(?=.</em>[a-zA-Z])(?=\S+$).{8,}$&rdquo;);
  }
</pre></p></li>
<li><p>存在问题：口令连续尝试次数没有限制 <br/>
整改方案：增加连续尝试错误次数，建议5次</p></li>
<li><p>存在问题：未设置会话超时时间 <br/>
整改方案：增加超时时间，未操作一段时间后，再次操作需要重新登录,设置token超时机制</p></li>
<li><p>存在问题：网络传输中未对数据进行加密,比如密码等 <br/>
整改方案：对传输的数据包进行整体加密，比如采用AES加密等</p></li>
<li><p>存在问题：密码输入调用系统键盘，未采用自主编写安全键盘，且无法进行按键随即布局，无法防止截屏记录 <br/>
整改方案：采用自主编写的安全键盘进行敏感信息的输入，同时做到按键布局随机，取消按键气泡等按下状态显示效果。同时按下的按键做到内存中加密存储，参考我的开源项目<a href="https://github.com/tangqifa/AndroidSecurityKeyboard">AndroidSecurityKeyboard</a></p></li>
<li><p>存在问题：数据传输MAC校验 <br/>
整改方案：增加MAC校验，例如：HMAC，对整体url做哈希，并加入特定的前缀</p></li>
<li><p>存在问题：软件更新通过HTTP方式，未采取安全传输方式  <br/>
整改方案：采用HTTPS</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[彻底理解单例模式]]></title>
    <link href="http://tangqifa.github.io/blog/2014/12/07/che-di-li-jie-dan-li-mo-shi/"/>
    <updated>2014-12-07T20:01:21+08:00</updated>
    <id>http://tangqifa.github.io/blog/2014/12/07/che-di-li-jie-dan-li-mo-shi</id>
    <content type="html"><![CDATA[<p>在众多的设计模式中，单例模式应该是用得较多的一种模式，同时它也相对简单，但是也容易出错，特别是在多线程的情况下，因此有必要彻底研究清楚。</p>

<h2>什么是单例模式</h2>

<p>单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。</p>

<h2>为什么会有单例模式</h2>

<ol>
<li>许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在Android应用程序开发时，通常用一个单例对象去读取存放在配置文件中的信息，然后在Activity或者Service中用这个单例对象统一的这些信息；</li>
<li>避免重复创建多个对象，提高性能。</li>
</ol>


<h2>怎么写单例模式</h2>

<p>在Java中通常有两种写法：</p>

<ul>
<li>懒汉模式(艺名：双重校验锁模式)</li>
</ul>


<p>懒汉模式，指全局的单例实例在第一次被使用时构建，如果不使用，对不起我很懒，有多懒，就是懒得创建，懒得理你；</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span>  <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">INSTANCE</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>             <span class="kd">synchronized</span><span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
</span><span class='line'>                 <span class="k">if</span><span class="o">(</span><span class="n">INSTANCE</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                     <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个写法只能在JDK1.5以后有效，原因是在1.5以后的版本关键字<code>volatile</code>才有了具体含义，至此之前，<code>volatile</code>只作为保留关键字，并没有具体含义；</p>

<p><code>volatile</code>含义是：当用于一个作用域时，读和写建立了一个happens-before关系，类似于申请和释放一个互斥锁，简单点说就是：用<code>volatile</code>修饰的变量，线程在每次使用变量的时候，都会读取变量最后修改的值。</p>

<p><em>现在我们来彻底理解这种写法：</em></p>

<!-- more -->


<p>代码首先声明了一个<code>私有</code> <code>静态</code> <code>原子类型volatile</code>的实例变量，<code>私有</code>保证外部类不能访问，<code>静态</code>保证实例化的变量只会存在一份，关键是怎么来理解这个<code>原子类型volatile</code>；</p>

<p>这要从编译原理说起，所谓编译，就是把源代码“翻译”成目标代码（大多数是指机器代码）的过程。针对Java，它的目标代码不是本地机器代码，而是虚拟机代码。编译原理里面有一个很重要的内容是编译器优化。所谓编译器优化是指，在不改变原来语义的情况下，通过调整语句顺序，来让程序运行的更快。这个过程成为reorder。</p>

<p>要知道，JVM只是一个标准，并不是实现。JVM中并没有规定有关编译器优化的内容，也就是说，JVM实现可以自由的进行编译器优化。</p>

<p>下面来想一下，创建一个变量需要哪些步骤呢？一个是申请一块内存，调用构造方法进行初始化操作，另一个是分配一个指针指向这块内存。这两个操作谁在前谁在后呢？JVM规范并没有规定。那么就存在这么一种情况，JVM是先开辟出一块内存，然后把指针指向这块内存，最后调用构造方法进行初始化。</p>

<p>现在我们再来理解这个<code>volatile</code>关键字，假如我们不使用这个关键字，不妨假设有两个线程A和B先后调用<code>getInstance()</code>方法，线程A已经走到<code>INSTANCE = new Singleton();</code>，此时，按照上面所说，这是后先虚拟机先开辟一块内存，让<code>INSTANCE</code>这个指针(叫<code>引用</code>更为准确)指向这块内存，在这个时候线程B走到第一个判断<code>INSTANCE</code>是否null，现在此时<code>INSTANCE</code>所指并不为空，这样就造成函数直接返回了<code>INSTANCE</code>,而此时<code>INSTANCE</code>还未来得及调用构造方法进行初始化，进而引发问题。</p>

<p>另外，为什么同步锁<code>synchronized</code>要加在方法内部呢，而不是方法上岂不更好？虽然也没错，但是这样存在性能问题，要知道synchronized修饰的同步块可是要比一般的代码段慢上几倍的！如果存在很多次getInstance()的调用，那性能问题就不得不考虑了！让我们来分析一下，究竟是整个方法都必须加锁，还是仅仅其中某一句加锁就足够了，分析可知，出现多个实例的原因是检测null的操作和创建对象的操作分离了。如果这两个操作能够原子地进行，那么单例就已经保证了，所以我们只需要同步这块代码就好。</p>

<p>那为啥需要第二次检查null的操作呢？原因是：假如有两个线程A和B同时调用<code>getInstance()</code>方法，都同时判断过第一个是否为null的条件，这个时候如果没有第二次判断为空的条件，这会创建多个实例，单例失败！</p>

<ul>
<li>饿汉模式</li>
</ul>


<p>饿汉模式，指全局的单例实例在类装载时构建</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>现在我们来彻底理解这种写法：</em></p>

<p>首先在类的成员变量中就声明并初始化一个私有，final，static的实例变量，这样就保证了这个实例只可能只有一份；紧接着是私有化构造方法，然后通过一个共有的静态工厂方法返回类的唯一实例；之所以才有静态工厂方法返回实例，而不是直接用过共有的成本变量呢？原因是采用静态工厂方法后期可以更好的扩展，例如下次我不想返回这个实例，也可以返回其他的，这样就方便我们修改；</p>

<p>虽然饿汉模式能很简洁地写出单例模式代码，但是这样带来了性能上的问题，因为这个单例实例，在类装载的时候就创建了，有可能我们根本不会用到这个方法，造成了资源浪费；那么怎么改进呢？请看下面这种改进写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Instance</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Instance</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这一版本的单例模式实现代码中，我们使用了Java的静态内部类。这一技术是被JVM明确说明了的，因此不存在任何二义性。在这段代码中，因为Singleton没有static的属性，因此并不会被初始化。直到调用getInstance()的时候，会首先加载Instance类，这个类有一个static的Singleton实例，因此需要调用Singleton的构造方法，然后getInstance()将把这个内部类的INSTANCE返回给使用者。由于这个INSTANCE是static的，因此并不会构造多次。</p>

<p>由于Instance是私有静态内部类，所以不会被其他类知道，同样，static语义也要求不会有多个实例存在。并且，JSL规范定义，类的构造必须是原子性的，非并发的，因此不需要加同步块。同样，由于这个构造是并发的，所以getInstance()也并不需要加同步。</p>

<h2>总结</h2>

<p>虽然以上两种模式，在大多数情况下都没有问题，但是在某些情况下，还是不能保证所创建的实例是唯一的，比如，如果这个类实现了序列化接口，那么就可能在反序列化的时候，通过<code>反射私有的构造方法</code>而创建实例，为了防止这样的情况发生，我们还需要在类中实现如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">private</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>             <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外，如果单例由不同的类装载器装入，那便有可能存在多个单例类的实例。假定不是远端存取，例如一些servlet容器对每个servlet使用完全不同的类  装载器，这样的话如果有两个servlet访问一个单例类，它们就都会有各自的实例。解决方式是：</p>

<pre><code class="java">private static Class getClass(String classname) throws ClassNotFoundException {     
       ClassLoader classLoader = Thread.currentThread().getContextClassLoader();     
       if(classLoader == null) {
          classLoader = Singleton.class.getClassLoader();     
     }
     return (classLoader.loadClass(classname));           
 }  
</code></pre>

<p>Effective Java作者Josh Bloch 提倡用enum的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，不过，个人认为由于1.5中才加入enum特性，这种写法不太常见，代码如下：</p>

<pre>
public enum Singleton {  
     INSTANCE;  
     public void whateverMethod() {  
     }  
 }
 </pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Octopress Blog Record]]></title>
    <link href="http://tangqifa.github.io/blog/2014/12/07/build-octopress-blog-record/"/>
    <updated>2014-12-07T13:11:05+08:00</updated>
    <id>http://tangqifa.github.io/blog/2014/12/07/build-octopress-blog-record</id>
    <content type="html"><![CDATA[<p><em>本篇教程在OSX Yosemite 10.10.1下完成</em></p>

<h2>依赖环境</h2>

<p>首先查看本机的git和ruby版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~$ git --version   
</span><span class='line'>git version 1.9.3 (Apple Git-50)</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~$ ruby --version   
</span><span class='line'>ruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]</span></code></pre></td></tr></table></div></figure>


<p>以上，默认ruby版本是2.0.0，需要升级到最新的2.1版本以上才能顺利进行后面的步骤。</p>

<p>安装brew，下面的步骤有依赖brew</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre></td></tr></table></div></figure>


<p>安装rvm，并自动更新ruby到最新版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~$ \curl -L https://get.rvm.io | bash -s stable --ruby</span></code></pre></td></tr></table></div></figure>


<p>切换到最新的版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~$ rvm use current
</span><span class='line'>Using /Users/tangqifa/.rvm/gems/ruby-2.1.5   </span></code></pre></td></tr></table></div></figure>


<p>查看是否为最新版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~$ ruby --version   
</span><span class='line'>ruby 2.1.5p273 (2014-11-13 revision 48405) [x86_64-darwin14.0]   </span></code></pre></td></tr></table></div></figure>


<p>安装rbenv，并添加到环境变量中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/sstephenson/rbenv.git .rbenv    </span></code></pre></td></tr></table></div></figure>


<p>在.bashrc文件加入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH="$PATH:$HOME/.rbenv/bin" # Add rbenv to PATH for scripting</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>安装过程</h2>

<p>接着执行以下安装命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress  
</span><span class='line'>cd octopress  
</span><span class='line'>gem install bundler  
</span><span class='line'>rbenv rehash  
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h2>更新</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress    
</span><span class='line'>git pull origin source      
</span><span class='line'>cd _deploy   
</span><span class='line'>git pull origin master</span></code></pre></td></tr></table></div></figure>


<h2>提交</h2>

<p>生成预览</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate #生成
</span><span class='line'>rake preview #预览
</span><span class='line'>rake deploy #发布</span></code></pre></td></tr></table></div></figure>


<p>提交代码库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>git add .
</span><span class='line'>git commit -m "commit log"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h2>遇到的问题总结</h2>

<ol>
<li>ruby版本必须升级到最新版本，否则在Yosemite上在执行<code>gem install bundler</code>会报错；</li>
<li>初始化name.github.io最好是空项目，否则在提交的时候容易出现问题</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android5.0第二个预览版Root教程]]></title>
    <link href="http://tangqifa.github.io/blog/2014/11/13/android5-dot-0di-er-ge-yu-lan-ban-rootjiao-cheng/"/>
    <updated>2014-11-13T13:43:55+08:00</updated>
    <id>http://tangqifa.github.io/blog/2014/11/13/android5-dot-0di-er-ge-yu-lan-ban-rootjiao-cheng</id>
    <content type="html"><![CDATA[<h2>1.刷官方ROM</h2>

<ul>
<li>终端下运行命令：<code>adb reboot-bootloader</code></li>
<li>解压官方最新下载包，运行脚本：<code>./flash-all.sh</code>即可一键刷机</li>
</ul>


<h2>2.刷第三方Recovery</h2>

<p> 终端运行命令：<code>fastboot flash recovery recovery-clockwork-6.0.4.5-hammerhead.img</code>为第四步做准备</p>

<h2>3.刷第三方内核</h2>

<p>终端运行命令：<code>fastboot flash boot boot.img</code>，由于SElinux安全的限制，目前只能通过刷修改过的内核，实现root</p>

<h2>4.Recovery Mode下刷入SuperSU.zip</h2>

<p>终端运行命令：<code>adb reboot recovery</code></p>

<p>以上所要用到的全部软件下载地址：<a href="http://pan.baidu.com/s/1vqkCu">百度网盘</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[完全重新安装Yosemite正式版]]></title>
    <link href="http://tangqifa.github.io/blog/2014/10/08/wan-quan-zhong-xin-an-zhuang-yosemitezheng-shi-ban/"/>
    <updated>2014-10-08T13:41:54+08:00</updated>
    <id>http://tangqifa.github.io/blog/2014/10/08/wan-quan-zhong-xin-an-zhuang-yosemitezheng-shi-ban</id>
    <content type="html"><![CDATA[<p>之前由于自己的mac用过一年多了，垃圾文件比较多，各种软件以及环境参数的配置也很乱，趁Yosemite正式版刚好发布了，就想完全重新安装，现把安装过程和所遇到的问题记录如下。</p>

<p>在完全重新安装之前，我是用AppStore升级安装过一次，不过升级之后，几个常用的软件都不能用了，经池建强老师的Yosemite上篇文章的指点，这些软件都能用了，但是还是有一些配置环境参数问题，遂决定完全重装一次。</p>

<p>经网上搜一大堆教程，想要完全重装，必须开机同时按住<code>option</code>或者<code>command + R</code>然后把硬盘东西全部抹去，这样一来，问题来了，系统没了，完全启动不了，万幸的是我之前已经硬盘资料备份了，但是没有做系统备份，现在也只有通过网络恢复了，但是等待数小时的结果是，网络异常，在线更新恢复失败。故，只要拿出杀手锏，U盘安装。</p>

<h2>安装前准备</h2>

<ul>
<li>16G U盘一个</li>
<li>Windows电脑一台（如果你还有另一台mac电脑，就不需要下面的镜像烧制软件了，mac自带就有，也方便得多）</li>
<li>Yosemite系统镜像一份 <a href="http://pan.baidu.com/s/1mgqSdfy">Yosemite 14A389 正式版</a></li>
<li>镜像烧制软件 <a href="http://www.acutesystems.com/scrtm.htm">TransMac</a>付费软件，试用期15天，完全够用</li>
</ul>


<!-- more -->


<h2>安装详细过程</h2>

<ul>
<li>以管理员身份打开TransMac，如下图
<img src="http://kejiwen.com/wp-content/uploads/2014/10/TransMac.jpg" alt="TransMac截图" /></li>
<li>格式化U盘为Mac格式，如图第一个红框 Format Disk for Mac</li>
<li>然后Restore with Disk Image，选择下载好的Yosemite镜像</li>
<li>大概等5分钟左右，就完成写入，U盘系统制作完毕</li>
<li>把U盘插上要安装的Mac上，开机按住 <code>option</code>选择U盘即可开始安装了。</li>
</ul>


<h2>Android开发环境配置</h2>

<ul>
<li>IDE下载 <a href="https://dl.google.com/android/studio/install/0.8.6/android-studio-bundle-135.1339820-mac.dmg">Android studio</a> 或则<a href="https://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip">ADT</a></li>
<li>JDK1.6 <a href="http://support.apple.com/kb/dl1572">苹果官方提供安装包</a></li>
<li>安装好jdk1.6后大多数软件10.9.5下不能正常工作的软件基本都能正常运行了</li>
</ul>


<h2>终端配置</h2>

<ul>
<li>iTerm <a href="http://iterm2.com/">下载</a></li>
<li>编辑<code>/etc/bashrc</code>文件，将<code>PS1的值</code>改为<code>\W\$</code>主要是解决名称过长问题</li>
</ul>


<h2>其他软件</h2>

<ul>
<li>如下图，大家按需下载，反正我基本上就这些
<img src="http://kejiwen.com/wp-content/uploads/2014/10/soft-set.png" alt="TransMac截图" /></li>
</ul>


<p>以上，基本就是我全新安装Yosemite的全过程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中优雅地使用字符串]]></title>
    <link href="http://tangqifa.github.io/blog/2014/06/12/suan-fa-zhi-zi-fu-chuan/"/>
    <updated>2014-06-12T13:34:48+08:00</updated>
    <id>http://tangqifa.github.io/blog/2014/06/12/suan-fa-zhi-zi-fu-chuan</id>
    <content type="html"><![CDATA[<blockquote><p>可以证明：字符串操作是计算机程序设计中最常见的行为。</p></blockquote>

<ol>
<li><p>String类是final的，不可被继承。String类源码签名：<code>public final class String</code></p></li>
<li><p>String类是的本质是字符数组char[], 并且其值不可改变。源码中声明：<code>private final char value[]</code>;</p></li>
<li><p>String类对象有个特殊的创建的方式，就是直接指定比如 <code>String s = "abc"</code>，<code>"abc"</code>就表示一个字符串对象。而<code>s</code>是<code>"abc"</code>对象的地址，也叫做<code>"abc"</code>对象的引用。</p></li>
<li><p>String对象可以通过<code>“+”</code>串联。串联后会生成新的字符串。</p></li>
<li><p>Java运行时会维护一个String Pool（String池），JavaDoc翻译为<code>“字符串缓冲区”</code>。String池用来存放运行时中产生的各种字符串，并且池中的字符串的内容<code>不重复</code>。</p></li>
<li><p>辅助类StringBuilder和StringBuffer。StringBuffer优点是<code>线程安全</code>，缺点是<code>速度慢</code>；而StringBuilder是1.5后新增类，优点是<code>速度快</code>，缺点是<code>非线程安全</code>。</p></li>
<li><p>String VS StringBuilder VS StringBuffer：String是字符串常量 (<code>不可变</code>)，StringBuilder和StringBuffer是字符串变量(<code>可变</code>)；他们的主要区别在于性能，由于String字符串不变性，因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，那速度是一定会相当慢的。而如果是使用 StringBuffer或者StringBuilder类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。但是并不是所有的String字符串操作都会比StringBuffer慢，在某些特殊的情况下，String字符串的拼接会被JVM解析成StringBuilder对象拼接，在这种情况下String的速度比StringBuffer的速度快。如：</p>

<pre><code> String name = ”I  ” + ”am ” + ”chenssy ” ;
 StringBuffer name = new StringBuffer(”I ”).append(” am ”).append(” chenssy ”);
</code></pre>

<p>  对于这两种方式，你会发现第一种比第二种快太多了，在这里StringBuffer的优势荡然无存。其真实的原因就在于JVM做了一下优化处理，其实String name = ”I ” + ”am ” + ”chenssy ” ;在JVM眼中就是String name = ”I am  chenssy ” ;这样的方式对于JVM而言，真的是不要什么时间。但是如果我们在这个其中增加一个String对象，那么JVM就会按照原来那种规范来构建String对象了。</p></li>
<li><p>字符串拼接方式</p>

<p>   对于字符串而言我们经常是要对其进行拼装处理的，在java中提高了三种拼装的方法：+、concat()以及append()方法。这三者之间存在什么区别呢？先看如下示例：</p></li>
</ol>


<!-- more -->


<pre>
public class StringTest {
    public static void main(String[] args) {
        //+
        long start_01 = System.currentTimeMillis();
        String a = "a";
        for(int i = 0 ; i < 100000 ; i++){
            a += "b";
        }
        long end_01 = System.currentTimeMillis();
        System.out.println("  +   所消耗的时间：" + (end_01 - start_01) + "毫米"); 
        //concat()
        long start_02 = System.currentTimeMillis();
        String c = "c";
        for(int i = 0 ; i < 100000 ; i++){
            c = c.concat("d");
        }
        long end_02 = System.currentTimeMillis();
        System.out.println("concat所消耗的时间：" + (end_02 - start_02) + "毫米");     
        //append
        long start_03 = System.currentTimeMillis();
        StringBuffer e = new StringBuffer("e");
        for(int i = 0 ; i < 100000 ; i++){
            e.append("d");
        }
        long end_03 = System.currentTimeMillis();
        System.out.println("append所消耗的时间：" + (end_03 - start_03) + "毫米");
    }
}
</pre>


<p>Output:</p>

<p><code>+</code>所消耗的时间：19080毫米</p>

<p><code>concat</code>所消耗的时间：9089毫米</p>

<p><code>append</code>所消耗的时间：10毫米</p>

<p>从上面的运行结果可以看出，append()速度最快，concat()次之，+最慢。原因请看下面分解:</p>

<h2><code>+</code>方式拼接字符串</h2>

<p>在前面我们知道编译器对+进行了优化，它是使用StringBuilder的append()方法来进行处理的，我们知道StringBuilder的速度比StringBuffer的速度更加快，但是为何运行速度还是那样呢？主要是因为编译器使用append()方法追加后要同toString()转换成String字符串，也就说  str +=”b”等同于str = new StringBuilder(str).append(&ldquo;b&rdquo;).toString();它变慢的关键原因就在于new StringBuilder()和toString()，这里可是创建了10W个StringBuilder对象，而且每次还需要将其转换成String，速度能不慢么？</p>

<h2>concat()方法拼接字符串</h2>

<pre>
public String concat(String str) {
    int otherLen = str.length();
    if (otherLen == 0) {
        return this;
    }
    char buf[] = new char[count + otherLen];
    getChars(0, count, buf, 0);
    str.getChars(0, otherLen, buf, count);
    return new String(0, count + otherLen, buf);
    }
    </pre>


<p>这是concat()的源码，它看上去就是一个数字拷贝形式，我们知道数组的处理速度是非常快的，但是由于该方法最后是这样的：return new String(0, count + otherLen, buf);这同样也创建了10W个字符串对象，这是它变慢的根本原因。</p>

<h2>append()方法拼接字符串</h2>

<pre>
public synchronized StringBuffer append(String str) {
    super.append(str);
        return this;
    }
    </pre>


<p> StringBuffer的append()方法是直接使用父类AbstractStringBuilder的append()方法，该方法的源码如下：
 <pre>
public AbstractStringBuilder append(String str) {
    if (str == null) str = &ldquo;null&rdquo;;
        int len = str.length();
    if (len == 0) return this;
    int newCount = count + len;
    if (newCount > value.length)
        expandCapacity(newCount);
    str.getChars(0, len, value, count);
    count = newCount;
    return this;
    }
    </pre>
与concat()方法相似，它也是进行字符数组处理的，加长，然后拷贝，但是请注意它最后是返回并没有返回一个新串，而是返回本身，也就说这这个10W次的循环过程中，它并没有产生新的字符串对象。通过上面的分析，我们需要在合适的场所选择合适的字符串拼接方式，但是并不一定就要选择append()和concat()方法，原因在于+根据符合我们的编程习惯，只有到了使用append()和concat()方法确实是可以对我们系统的效率起到比较大的帮助，才会考虑，同时鄙人也真的没有怎么用过concat()方法。</p>
]]></content>
  </entry>
  
</feed>
