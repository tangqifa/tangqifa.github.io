<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法 | Kejiwen Blog]]></title>
  <link href="http://tangqifa.github.io/blog/categories/suan-fa/atom.xml" rel="self"/>
  <link href="http://tangqifa.github.io/"/>
  <updated>2014-12-08T14:02:45+08:00</updated>
  <id>http://tangqifa.github.io/</id>
  <author>
    <name><![CDATA[Qifa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[算法之字符串]]></title>
    <link href="http://tangqifa.github.io/blog/2014/06/12/suan-fa-zhi-zi-fu-chuan/"/>
    <updated>2014-06-12T13:34:48+08:00</updated>
    <id>http://tangqifa.github.io/blog/2014/06/12/suan-fa-zhi-zi-fu-chuan</id>
    <content type="html"><![CDATA[<blockquote><p>可以证明：字符串操作是计算机程序设计中最常见的行为。</p></blockquote>

<h2>Java中优雅地使用字符串</h2>

<ol>
<li><p>String类是final的，不可被继承。String类源码签名：<code>public final class String</code></p></li>
<li><p>String类是的本质是字符数组char[], 并且其值不可改变。源码中声明：<code>private final char value[]</code>;</p></li>
<li><p>String类对象有个特殊的创建的方式，就是直接指定比如 <code>String s = "abc"</code>，<code>"abc"</code>就表示一个字符串对象。而<code>s</code>是<code>"abc"</code>对象的地址，也叫做<code>"abc"</code>对象的引用。</p></li>
<li><p>String对象可以通过<code>“+”</code>串联。串联后会生成新的字符串。</p></li>
<li><p>Java运行时会维护一个String Pool（String池），JavaDoc翻译为<code>“字符串缓冲区”</code>。String池用来存放运行时中产生的各种字符串，并且池中的字符串的内容<code>不重复</code>。</p></li>
<li><p>辅助类StringBuilder和StringBuffer。StringBuffer优点是<code>线程安全</code>，缺点是<code>速度慢</code>；而StringBuilder是1.5后新增类，优点是<code>速度快</code>，缺点是<code>非线程安全</code>。</p></li>
<li><p>String VS StringBuilder VS StringBuffer：String是字符串常量 (<code>不可变</code>)，StringBuilder和StringBuffer是字符串变量(<code>可变</code>)；他们的主要区别在于性能，由于String字符串不变性，因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象，所以经常改变内容的字符串最好不要用 String ，因为每次生成对象都会对系统性能产生影响，特别当内存中无引用对象多了以后， JVM 的 GC 就会开始工作，那速度是一定会相当慢的。而如果是使用 StringBuffer或者StringBuilder类则结果就不一样了，每次结果都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，再改变对象引用。所以在一般情况下推荐使用 StringBuffer ，特别是字符串对象经常改变的情况下。但是并不是所有的String字符串操作都会比StringBuffer慢，在某些特殊的情况下，String字符串的拼接会被JVM解析成StringBuilder对象拼接，在这种情况下String的速度比StringBuffer的速度快。如：</p>

<pre><code> String name = ”I  ” + ”am ” + ”chenssy ” ;
 StringBuffer name = new StringBuffer(”I ”).append(” am ”).append(” chenssy ”);
</code></pre>

<p>  对于这两种方式，你会发现第一种比第二种快太多了，在这里StringBuffer的优势荡然无存。其真实的原因就在于JVM做了一下优化处理，其实String name = ”I ” + ”am ” + ”chenssy ” ;在JVM眼中就是String name = ”I am  chenssy ” ;这样的方式对于JVM而言，真的是不要什么时间。但是如果我们在这个其中增加一个String对象，那么JVM就会按照原来那种规范来构建String对象了。</p></li>
<li><p>字符串拼接方式</p>

<p>   对于字符串而言我们经常是要对其进行拼装处理的，在java中提高了三种拼装的方法：+、concat()以及append()方法。这三者之间存在什么区别呢？先看如下示例：
&lt;</p></li>
</ol>


<!-- more -->


<pre>
public class StringTest {
    public static void main(String[] args) {
        //+
        long start_01 = System.currentTimeMillis();
        String a = "a";
        for(int i = 0 ; i < 100000 ; i++){
            a += "b";
        }
        long end_01 = System.currentTimeMillis();
        System.out.println("  +   所消耗的时间：" + (end_01 - start_01) + "毫米"); 
        //concat()
        long start_02 = System.currentTimeMillis();
        String c = "c";
        for(int i = 0 ; i < 100000 ; i++){
            c = c.concat("d");
        }
        long end_02 = System.currentTimeMillis();
        System.out.println("concat所消耗的时间：" + (end_02 - start_02) + "毫米");     
        //append
        long start_03 = System.currentTimeMillis();
        StringBuffer e = new StringBuffer("e");
        for(int i = 0 ; i < 100000 ; i++){
            e.append("d");
        }
        long end_03 = System.currentTimeMillis();
        System.out.println("append所消耗的时间：" + (end_03 - start_03) + "毫米");
    }
}
</pre>


<hr />

<p>Output:</p>

<p><code>+</code>所消耗的时间：19080毫米</p>

<p><code>concat</code>所消耗的时间：9089毫米</p>

<p><code>append</code>所消耗的时间：10毫米</p>

<p>从上面的运行结果可以看出，append()速度最快，concat()次之，+最慢。原因请看下面分解:</p>

<ol>
<li><p> <code>+</code>方式拼接字符串
在前面我们知道编译器对+进行了优化，它是使用StringBuilder的append()方法来进行处理的，我们知道StringBuilder的速度比StringBuffer的速度更加快，但是为何运行速度还是那样呢？主要是因为编译器使用append()方法追加后要同toString()转换成String字符串，也就说  str +=”b”等同于str = new StringBuilder(str).append(&ldquo;b&rdquo;).toString();它变慢的关键原因就在于new StringBuilder()和toString()，这里可是创建了10W个StringBuilder对象，而且每次还需要将其转换成String，速度能不慢么？</p></li>
<li><p>concat()方法拼接字符串</p></li>
</ol>


<pre>
public String concat(String str) {
    int otherLen = str.length();
    if (otherLen == 0) {
        return this;
    }
    char buf[] = new char[count + otherLen];
    getChars(0, count, buf, 0);
    str.getChars(0, otherLen, buf, count);
    return new String(0, count + otherLen, buf);
    }
    </pre>


<pre><code>这是concat()的源码，它看上去就是一个数字拷贝形式，我们知道数组的处理速度是非常快的，但是由于该方法最后是这样的：return new String(0, count + otherLen, buf);这同样也创建了10W个字符串对象，这是它变慢的根本原因。
</code></pre>

<p>3.append()方法拼接字符串</p>

<pre>
public synchronized StringBuffer append(String str) {
    super.append(str);
        return this;
    }
    </pre>


<p> StringBuffer的append()方法是直接使用父类AbstractStringBuilder的append()方法，该方法的源码如下：
 <pre>
public AbstractStringBuilder append(String str) {
    if (str == null) str = &ldquo;null&rdquo;;
        int len = str.length();
    if (len == 0) return this;
    int newCount = count + len;
    if (newCount > value.length)
        expandCapacity(newCount);
    str.getChars(0, len, value, count);
    count = newCount;
    return this;
    }
    </pre>
     与concat()方法相似，它也是进行字符数组处理的，加长，然后拷贝，但是请注意它最后是返回并没有返回一个新串，而是返回本身，也就说这这个10W次的循环过程中，它并没有产生新的字符串对象。通过上面的分析，我们需要在合适的场所选择合适的字符串拼接方式，但是并不一定就要选择append()和concat()方法，原因在于+根据符合我们的编程习惯，只有到了使用append()和concat()方法确实是可以对我们系统的效率起到比较大的帮助，才会考虑，同时鄙人也真的没有怎么用过concat()方法。</p>

<h2>相关算法总结</h2>

<ol>
<li>Hash算法</li>
<li>加密解密算法</li>
<li>匹配算法

<ol>
<li>KMP</li>
<li>其他</li>
<li>正则</li>
</ol>
</li>
<li>查找算法</li>
<li>比较算法</li>
<li>压缩算法</li>
</ol>


<h2>相关面试题解析</h2>

<ol>
<li>字符串翻转</li>
<li>其他</li>
</ol>

]]></content>
  </entry>
  
</feed>
