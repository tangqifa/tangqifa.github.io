<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Tech&Life]]></title>
  <link href="http://tangqifa.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://tangqifa.github.io/"/>
  <updated>2015-06-18T18:03:24+08:00</updated>
  <id>http://tangqifa.github.io/</id>
  <author>
    <name><![CDATA[tangqifa]]></name>
    <email><![CDATA[tangqifa@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android开发中常见安全问题]]></title>
    <link href="http://tangqifa.github.io/blog/2015/06/18/androidkai-fa-zhong-chang-jian-an-quan-wen-ti/"/>
    <updated>2015-06-18T17:43:58+08:00</updated>
    <id>http://tangqifa.github.io/blog/2015/06/18/androidkai-fa-zhong-chang-jian-an-quan-wen-ti</id>
    <content type="html"><![CDATA[<blockquote><p>由于公司是做互联网金融的，所以对APP客户端的安全性要求较高，本文针对中国金融认证中心（简称CFCA）对我们的APP检测过程中存在的问题和解决方案梳理如下：</p></blockquote>

<ul>
<li><p>存在问题：Activity劫持情况，恶意应用可以劫持合法应用 <br/>
整改方案：当程序启动后，判断当前置顶的应用是否为自身应用，若不是，则弹出Toast窗口提示用户注意 <br/>
关键代码：
<pre>
//获取当前顶层应用包名
    public static String getTopPackageName(Context context) {
      ActivityManager am = (ActivityManager)context.getSystemService(context.ACTIVITY_SERVICE);
      List&lt;ActivityManager.RunningTaskInfo> taskInfo = am.getRunningTasks(1);
      ComponentName componentInfo = taskInfo.get(0).topActivity;
      return componentInfo.getPackageName();
  }
</pre></p></li>
<li><p>存在问题：未检查是否root <br/>
整改方案：判断系统状态，发现root、越狱后提示用户风险 <br/>
关键代码：
<pre>
//判断是否root
  public static boolean isRoot() {
      boolean root = false;
      try {
          if ((!new File(&ldquo;/system/bin/su&rdquo;).exists())
                  &amp;&amp; (!new File(&ldquo;/system/xbin/su&rdquo;).exists())) {
              root = false;
          } else {
              root = true;
          }
      } catch (Exception e) {
      }
      return root;
  }
</pre></p></li>
<li><p>存在问题：软件未进行加壳加固 <br/>
整改方案：对软件进行加壳加固，主要考虑第三方，比如爱加密</p></li>
<li><p>存在问题：客户端未能验证自身合法性，服务器也未能验证客户端合法性 <br/>
整改方案：在程序启动以及运行过程中，对程序自身的签名进行校验，而校验方式一般是通过对应用的签名的验证，比如对签名做MD5或者sha1 <br/>
关键代码：
 <pre>
//获取签名的MD5
public static  String getCertMsg(Context context, String packageName) {
      String certMsg = &ldquo;&rdquo;;
      if (TextUtils.isEmpty(packageName)) {
          return certMsg;
      }
      PackageInfo pis;
      try {
          pis = context.getPackageManager().getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
          Signature[] sigs = pis.signatures;    //签名
          CertificateFactory certFactory = CertificateFactory.getInstance(&ldquo;X.509&rdquo;);
          //获取证书
          X509Certificate cert = (X509Certificate) certFactory.generateCertificate(
                  new ByteArrayInputStream(sigs[0].toByteArray()));
          //获取证书发行者   可根据证书发行者来判断该应用是否被二次打包（被破解的应用重新打包后，签名与原包一定不同，据此可以判断出该应用是否被人做过改动）
          certMsg = MD5Utils.getMD5(cert.getSubjectDN().toString());
          LogHelperDebug.d(TAG,&ldquo;SubjectDN MD5: &rdquo; + certMsg);
      } catch (CertificateException e) {
          LogHelperDebug.e(&ldquo;CertificateException&rdquo;, e.getMessage());
      } catch (Exception e) {
          LogHelperDebug.e(&ldquo;Exception: &rdquo;, e.getMessage());
      }
      return certMsg;
  }
</pre></p></li>
<li><p>存在问题：未对口令复杂度进行验证 <br/>
整改方案：建议要求口令复杂度，至少两种字符,主要利用正则表达式验证 <br/>
关键代码：
<pre>
    public static boolean checkPassword(String value) {
      return value.matches(&ldquo;^(?=.<em>[0-9])(?=.</em>[a-zA-Z])(?=\S+$).{8,}$&rdquo;);
  }
</pre></p></li>
<li><p>存在问题：口令连续尝试次数没有限制 <br/>
整改方案：增加连续尝试错误次数，建议5次</p></li>
<li><p>存在问题：未设置会话超时时间 <br/>
整改方案：增加超时时间，未操作一段时间后，再次操作需要重新登录,设置token超时机制</p></li>
<li><p>存在问题：网络传输中未对数据进行加密,比如密码等 <br/>
整改方案：对传输的数据包进行整体加密，比如采用AES加密等</p></li>
<li><p>存在问题：密码输入调用系统键盘，未采用自主编写安全键盘，且无法进行按键随即布局，无法防止截屏记录 <br/>
整改方案：采用自主编写的安全键盘进行敏感信息的输入，同时做到按键布局随机，取消按键气泡等按下状态显示效果。同时按下的按键做到内存中加密存储，参考我的开源项目<a href="https://github.com/tangqifa/AndroidSecurityKeyboard">AndroidSecurityKeyboard</a></p></li>
<li><p>存在问题：数据传输MAC校验 <br/>
整改方案：增加MAC校验，例如：HMAC，对整体url做哈希，并加入特定的前缀</p></li>
<li><p>存在问题：软件更新通过HTTP方式，未采取安全传输方式  <br/>
整改方案：采用HTTPS</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android5.0第二个预览版Root教程]]></title>
    <link href="http://tangqifa.github.io/blog/2014/11/13/android5-dot-0di-er-ge-yu-lan-ban-rootjiao-cheng/"/>
    <updated>2014-11-13T13:43:55+08:00</updated>
    <id>http://tangqifa.github.io/blog/2014/11/13/android5-dot-0di-er-ge-yu-lan-ban-rootjiao-cheng</id>
    <content type="html"><![CDATA[<h2>1.刷官方ROM</h2>

<ul>
<li>终端下运行命令：<code>adb reboot-bootloader</code></li>
<li>解压官方最新下载包，运行脚本：<code>./flash-all.sh</code>即可一键刷机</li>
</ul>


<h2>2.刷第三方Recovery</h2>

<p> 终端运行命令：<code>fastboot flash recovery recovery-clockwork-6.0.4.5-hammerhead.img</code>为第四步做准备</p>

<h2>3.刷第三方内核</h2>

<p>终端运行命令：<code>fastboot flash boot boot.img</code>，由于SElinux安全的限制，目前只能通过刷修改过的内核，实现root</p>

<h2>4.Recovery Mode下刷入SuperSU.zip</h2>

<p>终端运行命令：<code>adb reboot recovery</code></p>

<p>以上所要用到的全部软件下载地址：<a href="http://pan.baidu.com/s/1vqkCu">百度网盘</a></p>
]]></content>
  </entry>
  
</feed>
